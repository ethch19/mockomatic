version: '3.8'
services:
  frontend:
    image: ethch19/mockomatic_frontend:latest
    container_name: nuxt_frontend
    environment:
      - NUXT_PORT=${NUXT_PORT}
    expose:
      - "3000"
    networks:
      - app-network

  backend:
    image: ethch19/mockomatic_backend:latest
    container_name: rust_backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RUST_PORT=${RUST_PORT}
      - ACCESS_JWT_SECRET=${ACCESS_JWT_SECRET}
      - REFRESH_JWT_SECRET=${REFRESH_JWT_SECRET}
    expose:
      - "8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
      image: postgres:16
      restart: always
      container_name: postgres_db
      expose:
        - "5432"
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
      healthcheck:
        test: ["CMD", "pg_isready"]
        interval: 1s
        timeout: 5s
        retries: 10
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks:
        - app-network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    expose:
      - "80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_tunnel
    command: tunnel --no-autoupdate run --token ${TUNNEL_TOKEN}
    depends_on:
      - nginx
    networks:
      - app-network
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}  # .env file or Github Actions

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
