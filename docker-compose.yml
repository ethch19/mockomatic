name: mockomatic

services:
    frontend:
        image: ethch19/mockomatic_frontend:latest
        container_name: nuxt_frontend
        env_file:
            - .env
        environment:
            - NUXT_PORT=${NUXT_PORT:-3000}
        expose:
            - "3000"
        networks:
            - app-network

    backend:
        image: ethch19/mockomatic_backend:latest
        container_name: rust_backend
        env_file:
            - .env
        environment:
            - RUST_PORT=${RUST_PORT:-8080}
            - DATABASE_URL=${DATABASE_URL:?error}
            - ACCESS_JWT_SECRET=${ACCESS_JWT_SECRET:?error}
            - REFRESH_JWT_SECRET=${REFRESH_JWT_SECRET:?error}
            - CSRF_SECRET=${CSRF_SECRET:?error}
        expose:
            - "8080"
        depends_on:
            db:
                condition: service_started
        networks:
            - app-network

    db:
        image: postgres:16
        restart: always
        container_name: postgres_db
        expose:
            - "5432"
        env_file:
          - .env
        environment:
            - POSTGRES_USER=${POSTGRES_USER:?error}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?error}
            - POSTGRES_DB=${POSTGRES_DB:?error}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
            interval: 1s
            timeout: 5s
            retries: 10
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - app-network

    nginx:
        image: nginx:latest
        container_name: nginx_proxy
        expose:
            - "80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - frontend
            - backend
        networks:
            - app-network
        profiles:
            - prod

    cloudflared:
        image: cloudflare/cloudflared:latest
        container_name: cloudflared_tunnel
        command: tunnel --no-autoupdate run --token ${TUNNEL_TOKEN}
        depends_on:
            - nginx
        networks:
            - app-network
        env_file:
            - .env
        environment:
            - TUNNEL_TOKEN=${TUNNEL_TOKEN:?error}  # .env file or Github Actions
        profiles:
            - prod

networks:
    app-network:
        driver: bridge

volumes:
    postgres_data:
